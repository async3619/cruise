# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Album {
  id: Int!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  musics: [Music!]!
  artists: [Artist!]!
  leadArtists: [Artist!]!
  year: Int
  genre: String
  musicCount: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Artist {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  musics: [Music!]!
  albums: [Album!]!
  leadAlbums: [Album!]!
  musicCount: Int!
}

type AlbumArt {
  id: Int!
  type: AlbumArtType!
  mimeType: String!
  description: String!
  width: Int!
  height: Int!
  size: Int!
  path: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum AlbumArtType {
  Other
  Icon
  OtherIcon
  CoverFront
  CoverBack
  Leaflet
  Media
  LeadArtist
  Artist
  Conductor
  Band
  Composer
  Lyricist
  RecordingLocation
  DuringRecording
  DuringPerformance
  ScreenCapture
  BrightFish
  Illustration
  BandLogo
  PublisherLogo
  Undefined
}

type Music {
  id: Int!
  title: String!
  albumArtist: String
  genre: String
  year: Int
  track: Int
  disc: Int
  duration: Int!
  path: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  artists: [Artist!]!
  album: Album
  albumArts: [AlbumArt!]!
}

type Query {
  music(id: Int!): Music
  musics: [Music!]!
  album(id: Int!): Album
  albums: [Album!]!
  artist(id: Int!): Artist
  artists: [Artist!]!
}

type Mutation {
  updateAlbum(id: Int!, data: UpdateAlbumInput!): Album!
  scan: Boolean!
}

input UpdateAlbumInput {
  title: String!
  albumArtists: [String!]!
  genre: String
  year: String
}