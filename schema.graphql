# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AlbumArt {
  id: Int!
  type: AlbumArtType!
  mimeType: String!
  description: String!
  width: Int!
  height: Int!
  size: Int!
  path: String!
  checksum: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

enum AlbumArtType {
  Other
  Icon
  OtherIcon
  CoverFront
  CoverBack
  Leaflet
  Media
  LeadArtist
  Artist
  Conductor
  Band
  Composer
  Lyricist
  RecordingLocation
  DuringRecording
  DuringPerformance
  ScreenCapture
  BrightFish
  Illustration
  BandLogo
  PublisherLogo
  Undefined
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Album {
  id: Int!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  musics: [Music!]!
  artists: [Artist!]!
  leadArtists: [Artist!]!
  albumArts: [AlbumArt!]!
  year: Int
  genre: String
  musicCount: Int!
}

type Artist {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  musics: [Music!]!
  albums: [Album!]!
  leadAlbums: [Album!]!
  portrait(fetch: Boolean): AlbumArt
  musicCount: Int!
}

type Playlist {
  id: Int!
  name: String!
  musics: [Music!]!
}

type Music {
  id: Int!
  title: String!
  albumArtist: String
  genre: String
  year: Int
  track: Int
  disc: Int
  duration: Int!
  path: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  artists: [Artist!]!
  album: Album
  albumArts: [AlbumArt!]!
}

type Config {
  libraryDirectories: [String!]!
  appTheme: AppTheme!
  volume: Float!
  muted: Boolean!
  repeatMode: RepeatMode!
  language: String
}

enum AppTheme {
  Light
  Dark
  System
}

enum RepeatMode {
  None
  One
  All
}

type SearchSuggestion {
  id: Int!
  type: SearchSuggestionType!
  name: String!
}

enum SearchSuggestionType {
  Artist
  Album
  Music
}

type SearchResult {
  musics: [Music!]!
  albums: [Album!]!
  artists: [Artist!]!
  total: Int!
}

type Language {
  name: String!
  code: String!
}

type Query {
  music(id: Int!): Music
  musics: [Music!]!
  album(id: Int!): Album
  leadAlbumsByArtist(id: Int!): [Album!]!
  albums: [Album!]!
  artist(id: Int!): Artist
  artists: [Artist!]!
  leadArtists: [Artist!]!
  isMaximized: Boolean!
  config: Config!
  availableLanguages: [Language!]!
  needScan: Boolean!
  search(query: String!): SearchResult!
  searchSuggestions(query: String!, limit: Int!): [SearchSuggestion!]!
  playlists: [Playlist!]!
  playlist(id: Int!): Playlist!
}

type Mutation {
  updateAlbum(id: Int!, data: UpdateAlbumInput!): Album!
  selectAlbumArtFile: AlbumArt
  maximize: Boolean!
  minimize: Boolean!
  close: Boolean!
  selectPath(options: SelectPathInput!): [String!]
  updateConfig(config: ConfigInput!): Config!
  scan: Boolean!
  syncAlbumData(albumId: Int!, targetId: String!, locale: String): Boolean!
  createPlaylist(input: CreatePlaylistInput!): Playlist!
  createPlaylistFromMusics(input: CreatePlaylistInput!, musicIds: [Int!]!): Playlist!
  addMusicsToPlaylist(musicIds: [Int!]!, playlistId: Int!): Playlist!
  updatePlaylist(id: Int!, input: UpdatePlaylistInput!): Playlist!
  deletePlaylist(id: Int!): Boolean!
}

input UpdateAlbumInput {
  title: String!
  albumArtists: [String!]!
  genre: String
  year: String
  albumArts: [AlbumArtInput!]!
}

input AlbumArtInput {
  path: String!
  type: AlbumArtType!
  description: String
}

input SelectPathInput {
  directory: Boolean
  multiple: Boolean
  filters: [SelectPathFilterInput!]
}

input SelectPathFilterInput {
  name: String!
  extensions: [String!]!
}

input ConfigInput {
  libraryDirectories: [String!]!
  appTheme: AppTheme!
  volume: Float!
  muted: Boolean!
  repeatMode: RepeatMode!
  language: String
}

input CreatePlaylistInput {
  name: String!
}

input UpdatePlaylistInput {
  name: String
}

type Subscription {
  musicAdded: Music!
  musicUpdated: Music!
  musicRemoved: Int!
  musicsAdded: [Music!]!
  musicsUpdated: [Music!]!
  musicsRemoved: [Int!]!
  albumAdded: Album!
  albumRemoved: Int!
  albumsUpdated: [Album!]!
  albumUpdated(id: Int!): Album!
  leadArtistAdded: Artist!
  leadArtistRemoved: Int!
  artistPortraitAdded(artistId: Int!): Artist!
  maximizedStateChanged: Boolean!
  scanningStateChanged: Boolean!
  playlistAdded: Playlist!
  playlistUpdated: Playlist!
  playlistRemoved: Int!
}